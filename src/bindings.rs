/* automatically generated by rust-bindgen 0.69.2 */

pub const location_GPU: location = 0;
pub const location_CPU: location = 1;
pub type location = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Matrix {
    pub elements: *mut f32,
    pub size: ::std::os::raw::c_int,
    pub shape: *mut ::std::os::raw::c_int,
    pub num_dim: ::std::os::raw::c_int,
    pub loc: location,
}
extern "C" {
    pub fn printMatrix(m: *const Matrix);
}
extern "C" {
    pub fn checkMatrixEquality(m1: *const Matrix, m2: *const Matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MatrixFactory(
        shape: *const ::std::os::raw::c_int,
        num_dum: ::std::os::raw::c_int,
        loc: location,
    ) -> *mut Matrix;
}
extern "C" {
    pub fn CreateUniformRandomMatrix(
        shape: *const ::std::os::raw::c_int,
        num_dim: ::std::os::raw::c_int,
        loc: location,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> *mut Matrix;
}
extern "C" {
    pub fn CreateConstMatrix(
        num_dim: ::std::os::raw::c_int,
        shape: *const ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        loc: location,
    ) -> *mut Matrix;
}
extern "C" {
    pub fn CreateZeroMatrix(
        num_dim: ::std::os::raw::c_int,
        shape: *const ::std::os::raw::c_int,
        loc: location,
    ) -> *mut Matrix;
}
extern "C" {
    pub fn MatMul(a: *const Matrix, b: *const Matrix) -> *mut Matrix;
}
extern "C" {
    pub fn MatrixAdd(a: *const Matrix, b: *const Matrix) -> *mut Matrix;
}
extern "C" {
    pub fn MatrixElementwiseMult(a: *const Matrix, b: *const Matrix) -> *mut Matrix;
}
extern "C" {
    pub fn FreeMatrix(m: *mut Matrix);
}

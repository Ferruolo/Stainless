/* automatically generated by rust-bindgen 0.69.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CpuMatrix {
    pub elements: *mut ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub shape: *mut ::std::os::raw::c_int,
    pub num_dim: ::std::os::raw::c_int,
    pub elements_per_dim: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CpuMatrix() {
    const UNINIT: ::std::mem::MaybeUninit<CpuMatrix> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CpuMatrix>(),
        40usize,
        concat!("Size of: ", stringify!(CpuMatrix))
    );
    assert_eq!(
        ::std::mem::align_of::<CpuMatrix>(),
        8usize,
        concat!("Alignment of ", stringify!(CpuMatrix))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuMatrix),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuMatrix),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shape) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuMatrix),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_dim) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuMatrix),
            "::",
            stringify!(num_dim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements_per_dim) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuMatrix),
            "::",
            stringify!(elements_per_dim)
        )
    );
}
extern "C" {
    pub fn hello();
}
extern "C" {
    pub fn CreateMatrixInplace(
        num_dim: ::std::os::raw::c_int,
        shape: *mut ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        elements: *mut ::std::os::raw::c_int,
    ) -> *mut CpuMatrix;
}
extern "C" {
    pub fn CreateMatrix(
        num_dim: ::std::os::raw::c_int,
        shape: *mut ::std::os::raw::c_int,
        elements: *mut ::std::os::raw::c_int,
    ) -> *mut CpuMatrix;
}
extern "C" {
    pub fn CreateZeroMatrix(
        num_dim: ::std::os::raw::c_int,
        shape: *const ::std::os::raw::c_int,
    ) -> *mut CpuMatrix;
}
extern "C" {
    pub fn CreateOnesMatrix(
        num_dim: ::std::os::raw::c_int,
        shape: *const ::std::os::raw::c_int,
    ) -> *mut CpuMatrix;
}
extern "C" {
    pub fn MatrixAdd(a: *const CpuMatrix, b: *const CpuMatrix) -> *mut CpuMatrix;
}
extern "C" {
    pub fn getElement(
        m: *const CpuMatrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn printMatrix(m: *const CpuMatrix);
}
